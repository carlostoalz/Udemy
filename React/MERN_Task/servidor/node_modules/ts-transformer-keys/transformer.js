"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = __importDefault(require("typescript"));
var path_1 = __importDefault(require("path"));
function transformer(program) {
    return function (context) { return function (file) { return visitNodeAndChildren(file, program, context); }; };
}
exports.default = transformer;
function visitNodeAndChildren(node, program, context) {
    return typescript_1.default.visitEachChild(visitNode(node, program), function (childNode) { return visitNodeAndChildren(childNode, program, context); }, context);
}
function visitNode(node, program) {
    var typeChecker = program.getTypeChecker();
    if (isKeysImportExpression(node)) {
        return;
    }
    if (!isKeysCallExpression(node, typeChecker)) {
        return node;
    }
    if (!node.typeArguments) {
        return typescript_1.default.createArrayLiteral([]);
    }
    var type = typeChecker.getTypeFromTypeNode(node.typeArguments[0]);
    var properties = typeChecker.getPropertiesOfType(type);
    return typescript_1.default.createArrayLiteral(properties.map(function (property) { return typescript_1.default.createLiteral(property.name); }));
}
var indexJs = path_1.default.join(__dirname, 'index.js');
function isKeysImportExpression(node) {
    if (!typescript_1.default.isImportDeclaration(node)) {
        return false;
    }
    var module = node.moduleSpecifier.text;
    try {
        return indexJs === (module.startsWith('.')
            ? require.resolve(path_1.default.resolve(path_1.default.dirname(node.getSourceFile().fileName), module))
            : require.resolve(module));
    }
    catch (e) {
        return false;
    }
}
var indexTs = path_1.default.join(__dirname, 'index.d.ts');
function isKeysCallExpression(node, typeChecker) {
    var _a;
    if (!typescript_1.default.isCallExpression(node)) {
        return false;
    }
    var signature = typeChecker.getResolvedSignature(node);
    if (typeof signature === 'undefined') {
        return false;
    }
    var declaration = signature.declaration;
    return !!declaration
        && !typescript_1.default.isJSDocSignature(declaration)
        && require.resolve(declaration.getSourceFile().fileName) === indexTs
        && ((_a = declaration.name) === null || _a === void 0 ? void 0 : _a.getText()) === 'keys';
}
